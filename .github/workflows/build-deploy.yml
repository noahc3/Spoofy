name: Build & Deploy

on:
  push:
    branches:
      - master

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 13.x
    
    - name: Install NPM packages
      working-directory: ./SpoofyFrontend
      run: npm ci
    
    - name: Build project
      working-directory: ./SpoofyFrontend
      run: CI=false npm run build

    - name: Upload production-ready build files
      uses: actions/upload-artifact@v2
      with:
        name: production-files
        path: ./SpoofyFrontend/build
        
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Install .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.*
      
    - name: Build SpoofyAPI (Linux x64)
      run: |
        dotnet restore -r linux-x64 /p:PublishReadyToRun=true
        dotnet publish -c Release -r linux-x64 -o ./app-linux-x64 --self-contained true --no-restore /p:PublishReadyToRun=true /p:PublishSingleFile=true
      
    - name: Build SpoofyAPI (Linux x64 musl)
      run: |
        dotnet restore -r linux-musl-x64 /p:PublishReadyToRun=true
        dotnet publish -c Release -r linux-musl-x64 -o ./app-linux-musl-x64 --self-contained true --no-restore /p:PublishReadyToRun=true /p:PublishSingleFile=true
      
    - name: Build SpoofyAPI (Windows x64)
      run: |
        dotnet restore -r win-x64 /p:PublishReadyToRun=true
        dotnet publish -c Release -r win-x64 -o ./app-win-x64 --self-contained true --no-restore /p:PublishReadyToRun=true /p:PublishSingleFile=true
      
    - name: Upload backend build artifacts (Linux x64)
      uses: actions/upload-artifact@v2
      with:
        name: spoofyapi-linux-x64
        path: ./app-linux-x64
        
    - name: Upload backend build artifacts (Linux x64 musl)
      uses: actions/upload-artifact@v2
      with:
        name: spoofyapi-linux-musl-x64
        path: ./app-linux-musl-x64
        
    - name: Upload backend build artifacts (Windows x64)
      uses: actions/upload-artifact@v2
      with:
        name: spoofyapi-win-x64
        path: ./app-win-x64

  publish-docker:
    name: Publish Docker
    needs: build-backend
    runs-on: ubuntu-latest
    environment: Deploy Backend
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: spoofyapi-linux-musl-x64
        path: ./.docker/app-linux-musl-x64

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker container
      run: |
        cd .docker
        docker build -t ghcr.io/noahc3/spoofyapi:latest -t ghcr.io/noahc3/spoofyapi:$GITHUB_SHA --no-cache .
    
    - name: Publish Docker container
      run: docker push ghcr.io/noahc3/spoofyapi:$GITHUB_SHA
  
  deploy-pages:
    name: Deploy Pages
    needs: build-frontend
    runs-on: ubuntu-latest
    environment: Deploy Pages
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: production-files
        path: ./build

    - name: Deploy to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
